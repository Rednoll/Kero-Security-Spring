buildscript {
	
	repositories {
	
		jcenter()
	}
	
	dependencies {
		
		classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.+'
		classpath 'com.palantir.gradle.gitversion:gradle-git-version:0.12.+'
	}
}

plugins {

	id 'java-library'
	id 'jacoco'
	id 'maven-publish'
}

apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.palantir.git-version'

sourceCompatibility = '1.8'

group = 'com.github.rednoll'
version = gitVersion(prefix: 'release@') - ~/.dirty$/
description = '	Kero-Security-Spring - integration Kero-Security with Spring Boot.'

ext {
	
	git = 'https://github.com/Rednoll/kero-security-spring.git'
}

repositories {

	mavenCentral()
}

bootJar {

   enabled = false
}

jar {
	
	enabled = true
}

dependencies {

	implementation 'org.springframework.boot:spring-boot-autoconfigure'
	
	implementation 'org.slf4j:slf4j-api:1.7.25'
	
	testImplementation('org.springframework.boot:spring-boot-starter-test')

	implementation 'com.github.rednoll:kero-security:[0.1,)'
}

javadoc {
	
	source = sourceSets.main.allJava
	classpath = configurations.compile
}

task sourcesJar(type: Jar, dependsOn: classes) {

    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {

    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {

    archives sourcesJar
    archives javadocJar
}

test {

	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

jacocoTestReport {

    dependsOn test
	
	reports {
	
        xml.enabled true
    }
}

def pomConfig = {

	licenses {
		
		license {
			
			name 'The Apache License, Version 2.0'
			url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
			distribution 'repo'
		}
	}
	
	developers {
		
		developer {
		
			name 'Stepan Glumov (Kerovazzky)'
			email 'rednoll12@gmail.com'
			organization 'Rednoll (Kerovazzky)'
			organizationUrl 'https://github.com/Rednoll'
		}
	}
	
	scm {
		
		url project.git
	}
}

publishing {

	publications {
		
		PomFile(MavenPublication) {
			
			pom.withXml {
				
				def root = asNode()
					root.appendNode('name', project.name)
					root.appendNode('description', project.description)
					root.appendNode('url', project.git)
				
				root.children().last() + pomConfig
			
				def dependenciesNode = asNode().getAt('dependencies')[0] ?: asNode().appendNode('dependencies')
			  
				configurations.implementation.allDependencies.each {
				
					if(it.name != 'unspecified') {
				   
						def dependencyNode = dependenciesNode.appendNode('dependency')
					  
						dependencyNode.appendNode('groupId', it.group)
						dependencyNode.appendNode('artifactId', it.name)
						dependencyNode.appendNode('version', it.version)
					}
				}
			}
		}
	}
}

bintray {

	user = 'kerovazzky'
	key = System.getenv('BINTRAY_TOKEN')
	
	configurations = ['archives']
	publications = ['PomFile']
	
	pkg {
		
		repo = 'Kero-Security'
		name = project.name
		licenses = ['Apache-2.0']
		vcsUrl = project.git
	
		version {
	
			name = project.version
			vcsTag = 'release@' + project.version
			released  = new Date()
			
			gpg {
			
				sign = true
				passphrase = System.getenv('KEY_PASS')
            }
			
			mavenCentralSync {
				
				sync = true
				user = System.getenv('OSS_USER')
				password = System.getenv('OSS_PASS')
			}
		}
	}
}